{
  # Spark relation config
  spark: {
    app: {
        # not required, default name is the algorithm that you are going to execute.
        name: PageRank

        # not required
        partitionNum: 12
    }

    # Noted: master cannot congigure local[*] or local[2]
    master: local

    # not required
    conf: {
        driver-memory: 1g
        executor-memory: 1g
        executor-cores: 1g
        cores-max:6
    }
  }

  data: {
    # optional of nebula,csv,json,parquet
    source: json
    sink: nebula
    hasWeight: false
  }

  # Nebula Graph relation config
  nebula: {
    read: {
        # metadata server address
        metaAddress: "127.0.0.1:45500"
        space: nb
        # partition specified while creating nebula space, if you didn't specified the partition, then it's 100.
        partitionNumber: 100
        # nebula edge type
        labels: ["serve"]

        # if hasWeight is true，then weightCols is required， and weghtCols' order must be corresponding with labels.
        # Noted: the graph algorithm only supports isomorphic graphs,
        #        so the data type of each col in weightCols must be consistent and all numeric types.
        weightCols: ["start_year"]
    }

    write:{
        # 写入Nebula
        graphAddress: "192.168.8.171:3699"
        user:root
        pswd:nebula
        space:nb
        tag:pagerank
        propCol:pr
        colType:double
    }

  }

  local: {
    read:{
        filePath: /Users/nicole/workspace/nebula/nebula-java/tools/nebula-algorithm/src/main/resources/edge
        srcId: src
        dstId: dst
        weight: degree
    }
    write:{
        resultPath:/tmp/pagerank
    }
  }

  algorithm: {
    # the algorithm that you are going to execute，pick one from [pagerank, louvain]
    executeAlgo: pagerank

    # pagerank parameter
    pagerank: {
        maxIter: 20
        resetProb: 0.15  # default 0.15
    }

    # louvain parameter
    louvain: {
        maxIter: 20
        internalIter: 10
        tol: 0.5
   }

   # connected component parameter  TODO not implemented yet.
    connectedcomponent: {
        maxIter: 20
   }

   # LabelPropagation
    labelpropagation: {
        maxIter: 20
   }

   # ShortestPaths
    shortestpaths: {
        landmarks: "11111,22222"
   }


    # vertex degree static
    degreestatic: {}



 }

}
