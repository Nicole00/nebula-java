/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ReportTaskReq implements TBase, java.io.Serializable, Cloneable, Comparable<ReportTaskReq> {
  private static final TStruct STRUCT_DESC = new TStruct("ReportTaskReq");
  private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short)1);
  private static final TField JOB_ID_FIELD_DESC = new TField("job_id", TType.I32, (short)2);
  private static final TField TASK_ID_FIELD_DESC = new TField("task_id", TType.I32, (short)3);
  private static final TField STATIS_FIELD_DESC = new TField("statis", TType.STRUCT, (short)4);

  /**
   * 
   * @see ErrorCode
   */
  public int code;
  public int job_id;
  public int task_id;
  public StatisItem statis;
  public static final int CODE = 1;
  public static final int JOB_ID = 2;
  public static final int TASK_ID = 3;
  public static final int STATIS = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private static final int __JOB_ID_ISSET_ID = 1;
  private static final int __TASK_ID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(JOB_ID, new FieldMetaData("job_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TASK_ID, new FieldMetaData("task_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(STATIS, new FieldMetaData("statis", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, StatisItem.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ReportTaskReq.class, metaDataMap);
  }

  public ReportTaskReq() {
  }

  public ReportTaskReq(
    int code,
    int job_id,
    int task_id)
  {
    this();
    this.code = code;
    setCodeIsSet(true);
    this.job_id = job_id;
    setJob_idIsSet(true);
    this.task_id = task_id;
    setTask_idIsSet(true);
  }

  public ReportTaskReq(
    int code,
    int job_id,
    int task_id,
    StatisItem statis)
  {
    this();
    this.code = code;
    setCodeIsSet(true);
    this.job_id = job_id;
    setJob_idIsSet(true);
    this.task_id = task_id;
    setTask_idIsSet(true);
    this.statis = statis;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportTaskReq(ReportTaskReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.code = TBaseHelper.deepCopy(other.code);
    this.job_id = TBaseHelper.deepCopy(other.job_id);
    this.task_id = TBaseHelper.deepCopy(other.task_id);
    if (other.isSetStatis()) {
      this.statis = TBaseHelper.deepCopy(other.statis);
    }
  }

  public ReportTaskReq deepCopy() {
    return new ReportTaskReq(this);
  }

  @Deprecated
  public ReportTaskReq clone() {
    return new ReportTaskReq(this);
  }

  /**
   * 
   * @see ErrorCode
   */
  public int  getCode() {
    return this.code;
  }

  /**
   * 
   * @see ErrorCode
   */
  public ReportTaskReq setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bit_vector.clear(__CODE_ISSET_ID);
  }

  // Returns true if field code is set (has been assigned a value) and false otherwise
  public boolean isSetCode() {
    return __isset_bit_vector.get(__CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bit_vector.set(__CODE_ISSET_ID, value);
  }

  public int  getJob_id() {
    return this.job_id;
  }

  public ReportTaskReq setJob_id(int job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bit_vector.clear(__JOB_ID_ISSET_ID);
  }

  // Returns true if field job_id is set (has been assigned a value) and false otherwise
  public boolean isSetJob_id() {
    return __isset_bit_vector.get(__JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bit_vector.set(__JOB_ID_ISSET_ID, value);
  }

  public int  getTask_id() {
    return this.task_id;
  }

  public ReportTaskReq setTask_id(int task_id) {
    this.task_id = task_id;
    setTask_idIsSet(true);
    return this;
  }

  public void unsetTask_id() {
    __isset_bit_vector.clear(__TASK_ID_ISSET_ID);
  }

  // Returns true if field task_id is set (has been assigned a value) and false otherwise
  public boolean isSetTask_id() {
    return __isset_bit_vector.get(__TASK_ID_ISSET_ID);
  }

  public void setTask_idIsSet(boolean value) {
    __isset_bit_vector.set(__TASK_ID_ISSET_ID, value);
  }

  public StatisItem  getStatis() {
    return this.statis;
  }

  public ReportTaskReq setStatis(StatisItem statis) {
    this.statis = statis;
    return this;
  }

  public void unsetStatis() {
    this.statis = null;
  }

  // Returns true if field statis is set (has been assigned a value) and false otherwise
  public boolean isSetStatis() {
    return this.statis != null;
  }

  public void setStatisIsSet(boolean value) {
    if (!value) {
      this.statis = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((Integer)value);
      }
      break;

    case STATIS:
      if (value == null) {
        unsetStatis();
      } else {
        setStatis((StatisItem)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CODE:
      return getCode();

    case JOB_ID:
      return new Integer(getJob_id());

    case TASK_ID:
      return new Integer(getTask_id());

    case STATIS:
      return getStatis();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CODE:
      return isSetCode();
    case JOB_ID:
      return isSetJob_id();
    case TASK_ID:
      return isSetTask_id();
    case STATIS:
      return isSetStatis();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportTaskReq)
      return this.equals((ReportTaskReq)that);
    return false;
  }

  public boolean equals(ReportTaskReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!TBaseHelper.equalsNobinary(this.code, that.code))
        return false;
    }

    boolean this_present_job_id = true;
    boolean that_present_job_id = true;
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.job_id, that.job_id))
        return false;
    }

    boolean this_present_task_id = true;
    boolean that_present_task_id = true;
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.task_id, that.task_id))
        return false;
    }

    boolean this_present_statis = true && this.isSetStatis();
    boolean that_present_statis = true && that.isSetStatis();
    if (this_present_statis || that_present_statis) {
      if (!(this_present_statis && that_present_statis))
        return false;
      if (!TBaseHelper.equalsNobinary(this.statis, that.statis))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_code = true;
    builder.append(present_code);
    if (present_code)
      builder.append(code);

    boolean present_job_id = true;
    builder.append(present_job_id);
    if (present_job_id)
      builder.append(job_id);

    boolean present_task_id = true;
    builder.append(present_task_id);
    if (present_task_id)
      builder.append(task_id);

    boolean present_statis = true && (isSetStatis());
    builder.append(present_statis);
    if (present_statis)
      builder.append(statis);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ReportTaskReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(code, other.code);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetJob_id()).compareTo(other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(job_id, other.job_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(task_id, other.task_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatis()).compareTo(other.isSetStatis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(statis, other.statis);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CODE:
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            setCodeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOB_ID:
          if (field.type == TType.I32) {
            this.job_id = iprot.readI32();
            setJob_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASK_ID:
          if (field.type == TType.I32) {
            this.task_id = iprot.readI32();
            setTask_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATIS:
          if (field.type == TType.STRUCT) {
            this.statis = new StatisItem();
            this.statis.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
    oprot.writeI32(this.job_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
    oprot.writeI32(this.task_id);
    oprot.writeFieldEnd();
    if (this.statis != null) {
      if (isSetStatis()) {
        oprot.writeFieldBegin(STATIS_FIELD_DESC);
        this.statis.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ReportTaskReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("code");
    sb.append(space);
    sb.append(":").append(space);
    String code_name = ErrorCode.VALUES_TO_NAMES.get(this. getCode());
    if (code_name != null) {
      sb.append(code_name);
      sb.append(" (");
    }
    sb.append(this. getCode());
    if (code_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("job_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getJob_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("task_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getTask_id(), indent + 1, prettyPrint));
    first = false;
    if (isSetStatis())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("statis");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStatis() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStatis(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCode() && !ErrorCode.VALID_VALUES.contains(code)){
      throw new TProtocolException("The field 'code' has been assigned the invalid value " + code);
    }
  }

}

